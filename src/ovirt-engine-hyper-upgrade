#!/usr/bin/python
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import argparse
import subprocess
import sys


def print_info(message):
    """
    Print [ INFO ] in green before the message

    Argument:
        message - Message to be printed with INFO note
    """
    print("\033[92m\n[ INFO  ]\033[00m {msg}".format(msg=message))


def print_err(message):
    """
    Print [ INFO ] in green before the message

    Argument:
        message - Message to be printed with INFO note
    """
    print("\033[91m\n[ ERROR  ]\033[00m {msg}" .format(msg=message))


def execute_cmd(command, print_output=True, env_shell=False):
    """
    Execute command

    Parameters:
        command - command to be executed, use ['cmd' 'argument']
        print_output - Print output after execution
        env_shell - Use the shell env, use True or False

    Returns: return code or exit in case of failure
    """

    print_info('Executing: {cmd}'.format(cmd=' '.join(command)))

    p = subprocess.Popen(
        command,
        shell=env_shell
    )
    returncode = p.wait()

    if returncode != 0:
        print_err("An error happened executing {cmd}, "
                  "aborting...".format(cmd=' '.join(command)))
        sys.exit(2)

    return returncode

class Subscriptions(object):
    RHV_40_REPOS = [
        "rhel-7-server-supplementary-rpms",
        "rhel-7-server-rpms",
        "rhel-7-server-rhv-4.0-rpms",
        "jb-eap-7-for-rhel-7-server-rpms"
    ]

    RHV_41_REPOS = [
        "rhel-7-server-supplementary-rpms",
        "rhel-7-server-rpms",
        "rhel-7-server-rhv-4.1-rpms",
        "jb-eap-7-for-rhel-7-server-rpms"
    ]

    SUBSCRIPTION_MANAGER = [
        'env', 'LC_ALL=C', 'subscription-manager'
    ]

    def __init__(self):
        super(Subscriptions, self).__init__()
        self.repos = []

    def get_enabled_repos(self):
        '''
        Get enabled repos

        Returns: All repos or subsription-manager error output
        '''
        self.repos = []

        rhsm_cmd = list(self.SUBSCRIPTION_MANAGER)
        rhsm_cmd.extend(['repos', '--list-enabled'])

        return execute_cmd(rhsm_cmd)

    def check_rhv_repos(self, version):
        '''
        Check repositories for RHV

        Parameters:
            version: RHEV version to check, example of values (str):
                4.0
                4.1

        Returns: True or False
        '''
        enabled = set(self.repos)

        if version == '4.0':
            required = set(self.RHV_40_REPOS)
        elif version == '4.1':
            required = set(self.RHV_41_REPOS)
        else:
            raise RuntimeError('Version parameters not supported!')

        unknown = enabled.difference(required)
        missing = required.difference(enabled)
        if missing:
            print("The following repositories are required for {ver}".format(
                    ver=version))
            for repo in missing:
                print((" - {repo}".format(repo=repo)))

        if unknown:
            print("The following repositories are enabled and not supported "
                  "for RHV {ver}".format(ver=version))

        if missing or unknown:
            return False

        return True

    def repository(self, action, repo):
        '''
        Enable repository using subscription-manager
        Parameters:
            action
                enable  - Enable channel
                disable - Disable channel

            repo
                repository name (str)
        Returns: command output
        '''

        rhsm_cmd = list(self.SUBSCRIPTION_MANAGER)

        if 'enable' == action:
            action = ['repos', '--enable', repo]
        elif 'disable' == action:
            action = ['repos', '--disable', repo]
        else:
            raise RuntimeError(
                "Unknown action [%s] for repositories!" % action
            )

        rhsm_cmd.extend(action)

        return execute_cmd(rhsm_cmd)


class UpgradeHelper(object):

    UPGRADE_CHECK = [
        'env',
        'LC_ALL=C',
        'engine-upgrade-check'
    ]

    YUM_UPDATE_CMD = [
        'env',
        'LC_ALL=C',
        'yum', 'update', 'ovirt-engine-setup*', 'ovirt-engine-dwh-setup*'
    ]

    ENGINE_SETUP = [
        'env',
        'LC_ALL=C',
        'engine-setup'
    ]

    def __init__(self):
        super(UpgradeHelper, self).__init__()

    def is_upgrade_available(self):
        '''
        Execute engine-upgrade-check
        Returns: command output
        '''
        return execute_cmd(self.UPGRADE_CHECK)

    def upgrade_engine_setup(self):
        '''
        Look for packages with ovirt-engine-setup* name
        and execute yum update
        Returns: Empty list or yum update output
        '''

        print("Consulting ovirt-engine-setup and ovirt-engine-dwh"
              "packages in the system for update...")

        return execute_cmd(self.YUM_UPDATE_CMD)

    def run_engine_setup(self):
        '''
        Execute engine-setup
        Returns: command output
        '''
        return execute_cmd(self.ENGINE_SETUP)

    def update_system(self):
        '''
        Execute yum update
        Returns: command output
        '''
        return execute_cmd(self.YUM_UPDATE_CMD)


def main():
    '''
    A tool to help users upgrade RHV environments
    '''

    # Dictionary that keep the release data like:
    # version, repo_to_enable, repo_to_disable
    check_releases = {}
    check_releases['repos'] = [
        {
            'version': '4.0',
            'repo_to_enable': 'rhel-7-server-rhv-4.1-rpms',
            'repo_to_disable': 'rhel-7-server-rhv-4.0-rpms'
        },
        {
            'version': '4.1',
            'repo_to_enable': 'rhel-7-server-rhv-4.2-rpms',
            'repo_to_disable': 'rhel-7-server-rhv-4.1-rpms'
        }
    ]

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description='Tool to upgrade RHV environments',
        epilog='Example of use:\n%(prog)s '
                    '--check-upgrade-rhv-4-0'
    )

    parser.add_argument(
        '--check-upgrade-rhv-4-0',
        action='store_true',
        help='Check if RHV 4.0 channels have upgrade available. '
             'Also enable 4.1 channels',
    )

    parser.add_argument(
        '--check-upgrade-rhv-4-1',
        action='store_true',
        help='Check if RHV 4.1 channels have zstream upgrade available. '
             'Also enable 4.2 channels',
    )

    parser.add_argument(
        '--list-enabled-repos',
        action='store_true',
        help='List all enabled repositories',
    )

    if len(sys.argv) <= 1:
        parser.print_usage()
        sys.exit(1)

    args = parser.parse_args()
    c = Subscriptions()

    if args.list_enabled_repos:
        print((c.get_enabled_repos()))
        return 0

    if args.check_upgrade_rhv_4_0:
        version = "4.0"
    elif args.check_upgrade_rhv_4_1:
        version = "4.1"
    else:
        raise RuntimeError("Unable to detect the RHV version to check!")

    for release in check_releases['repos']:
        if release['version'] == version:
            c.check_rhv_repos(release['version'])
            u = UpgradeHelper()
            if u.is_upgrade_available():
                print("An upgrade is available, upgrading to "
                      "latest {version}.z".format(version=release['version']))

                u.upgrade_engine_setup()
                u.run_engine_setup()

                updated = u.update_system()
                if "kernel" in updated:
                    print("A kernel update has been installed, please "
                          "reboot the system to complete the update.")
                    return

            c.repository(action='enable', repo=release['repo_to_enable'])
            u.upgrade_engine_setup()
            u.run_engine_setup()
            updated = u.update_system()
            c.repository(action='disable', repo=release['repo_to_disable'])

            print("Please reboot the system to complete the update.")
            print("Once rebooted, please change the cluster and datacenter "
                  "compatibility level to {version}.\n"
                  "See Chapter 4, Post-Upgrade Tasks: "
                  "https://access.redhat.com/documentation/en/red-hat-virtual"
                  "ization/{version}/single/upgrade-guide#chap-"
                  "Post-Upgrade_Tasks".format(version=release['version']))

    return 0


if __name__ == '__main__':
    sys.exit(main())

# vim: expandtab tabstop=4 shiftwidth=4
